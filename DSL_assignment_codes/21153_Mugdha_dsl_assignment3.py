# -*- coding: utf-8 -*-
"""DSL_Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v4uZLwcg2zgUrXDBBVAEq32u_aYlHnu7

Name: Mugdha Malpe<br>
Roll No. 21153<br>
Batch: G1<br>

DSL Assignment 3 Mock

3. Write a Python program to compute following computation on matrix: <br>
a)	Addition of two matrices <br>
b)	Subtraction of two matrices <br>
c)	Multiplication of two matrices <br>
d)	Transpose of a matrix
"""

class Matrix:
    def __init__(self): #init method for initialization
        self.matrix = []
        self.rows = 0
        self.columns = 0
        self.inputMatrix() #calling the accept matrix method 

    def inputMatrix(self):
        #Function to accept the matrix
        self.rows = int(input("Enter number of Rows: ")) #input no. of rows
        if(self.rows <= 0):
            print("Invalid index! Index out of bound...\nPlease re-enter a positive number>0\n")
            self.rows = int(input("Enter number of Rows: "))

        self.columns = int(input("Enter number of Columns: ")) #input no. of columns
        if(self.columns <= 0):
            print("Invalid index! Index out of bound...\nPlease re-enter a positive number>0\n")
            self.columns = int(input("Enter number of Columns: "))

        for i in range(self.rows): #input elements of matrix
            matrix = []
            for j in range(self.columns):
                matrix.append(int(input("\nEnter element at [{0},{1}] ".format(i+1, j+1))))
            self.matrix.append(matrix)


def displayMatrix(matrix):
    #Function to display the matrix
    rows = len(matrix)
    columns = len(matrix[0])
    for i in range(rows):
        for j in range(columns):
            print(matrix[i][j], end="\t")
        print()


def matrixAddition(matrix1, matrix2):
    #Function that adds 2 matrices
    if matrix1.rows != matrix2.rows or matrix1.columns != matrix2.columns:
        print("Matrices are not suitable for addition")
        return -1

    matrix3 = []
    for i in range(matrix1.rows):
        mat = []
        for j in range(matrix1.columns):
            x = matrix1.matrix[i][j] + matrix2.matrix[i][j]
            mat.append(x)
        matrix3.append(mat)

    return matrix3


def matrixSubtraction(matrix1, matrix2):
    #Function that subtracts 2 matrices
    if matrix1.rows != matrix2.rows or matrix1.columns != matrix2.columns:
        print("Matrices are not suitable for subtraction")
        return -1

    matrix3 = []
    for i in range(matrix1.rows):
        mat = []
        for j in range(matrix1.columns):
            x = matrix1.matrix[i][j] - matrix2.matrix[i][j]
            mat.append(x)
        matrix3.append(mat)

    return matrix3


def matrixMultiplication(matrix1, matrix2):
    #Function that multiplies 2 matrices

    if matrix1.rows != matrix2.columns: #checks if the matrices can be multiplied
        print("Matrices are not suitable for multiplication")
        return -1

    matrix3 = []
    for i in range(matrix1.rows):
        mat = []
        for j in range(matrix2.columns):
            mat.append(0)
        matrix3.append(mat) #3X2 dimensions ka zero matrix
        #matrix3 is a zero matrix and stores the multiplication of matrix1 and matrix2

    for i in range(matrix1.rows):
        for j in range(matrix2.columns):
            for k in range(matrix2.rows):
                matrix3[i][j] += matrix1.matrix[i][k] * matrix2.matrix[k][j]

    return matrix3


def matrixTranspose(matrix):
    #Function that makes a transpose of the matrix
    rows = len(matrix)
    columns = len(matrix[0])

    reqMatrix = []
    for i in range(columns):
        mat = []
        for j in range(rows):
            mat.append(0)
        reqMatrix.append(mat) #0 matrix that stores the result for transpose of matrix
    
    for i in range(columns):
        for j in range(rows):
            reqMatrix[i][j] = matrix[j][i]

    return reqMatrix


print("*****Matrix 1*****")
m1 = Matrix()

print("*****Matrix 2*****")
m2 = Matrix()

print("\n")
print("Matrix 1")
displayMatrix(m1.matrix)
print("\n")
print("Matrix 2")
displayMatrix(m2.matrix)
print("\n")

while (True):
    print("*"*10 + "Menu" + "*"*10)
    print("""1 . Addition of 2 matrices
2. Subtraction of 2 matrices
3. Multiplication of 2 matrices
4. Transpose of both matrices
5. EXIT """)
    choice = int(input("Enter number for the operation to be performed: "))
    if choice == 1:
        print("\n")
        print("Addition")
        if (matrixAddition(m1,m2) != -1): #!-1 checks if the 2 matrices are valid for addition
            displayMatrix(matrixAddition(m1, m2))
        

    if choice == 2:
        print("\n")
        print("Subtraction")
        if (matrixSubtraction(m1,m2) != -1): #!-1 checks if the 2 matrices are valid for subtraction
            displayMatrix(matrixSubtraction(m1, m2))
        

    if choice == 3:
        print("\n")
        print("multiplication")
        if (matrixMultiplication(m1,m2) != -1): #!-1 checks if the 2 matrices are valid for multiplication
            displayMatrix(matrixMultiplication(m1, m2))

    if choice == 4:
        print("\n")
        print("Transpose of Matrix 1")
        displayMatrix(matrixTranspose(m1.matrix))
        print("\n")
        print("Transpose of Matrix 2")
        displayMatrix(matrixTranspose(m2.matrix))

    if choice == 5:
        print("Exiting...thank you...")
        break