# -*- coding: utf-8 -*-
"""DSL_Assignment5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fRRG_en-ejrrJRexbcPZLDb_aoPe7kAP

Name: Mugdha Malpe<br>
Roll No. 21153<br>
Batch: G1<br>

DSL Assignment 5

Write a Python program to store second year percentage of students in array. 
Write function for sorting array of floating-point numbers in ascending order 
using<br> a) Insertion sort and <br> b) Shell Sort and display top five scores.
"""

class Sorting:
    def __init__(self):
        self.length = 0
        self.arr = []
        self.insertionSortList = []
        self.shellSortList = []

    def acceptList(self):
        self.length = int(input("Enter the number of students in the class: "))
        if(self.length > 5):
          for i in range(self.length):
            temp = float(input(f"Enter the percent of student at {i+1} roll no "))
            self.arr.append(temp)
        else:
          print("Enter a number greater than 5")
          self.length = int(input("Enter the number of students in the class "))
          for i in range(self.length):
            temp = float(input(f"Enter the percent of student at {i+1} roll no "))
            self.arr.append(temp)

    def insertionSort(self): #in each pass the list gets divided into 2 parts sorted and unsorted time complexity O(n^2)
        print("Current List is ", end=" ")
        printList(self.arr)
        self.insertionSortList = self.arr.copy()
        for j in range(1, self.length):
            temp = self.insertionSortList[j]
            self.Insert(temp, j-1) #pass value of j-1 to compare

            print("Insert operation")
            print(self.insertionSortList)

        print("\nSorted List using insertion sort", end=" ")
        printList(self.insertionSortList)

        print("\nTop 5 in ascending order")
        print(self.insertionSortList[-5:])


    def Insert(self, temp, i): #This is code to insert elements before the jth index in the consideration
        while(temp<self.insertionSortList[i] and i>=0):  #Here i>=0 is the last condition of the check
            self.insertionSortList[i+1] = self.insertionSortList[i]
            i -=1
        self.insertionSortList[i+1] = temp
    

    def shellSort(self):
        print("Current List is ", end=" ")
        printList(self.arr) 
        self.shellSortList = self.arr.copy()
        n = self.length
        gap = n//2
        while gap > 0:  # loop(i = n/2; 0; i/=2)
            j = gap
            while j < n: #loop(j = gap; j<n; j++)
                i = j - gap
                while i>=0: #loop(i= j-gap; i>=0; i-=gap) 
                    #This is to check say if gap is 2 then it will check for each gap previous values also
                    if self.shellSortList[i] > self.shellSortList[i+gap]:
                        switch(i+gap, i, self.shellSortList)
                        i = i-gap
                    else:
                        i = i-gap
                        break
                    # print("After operation:", end= " ")
                    # print(self.shellSortList)
                j +=1
            gap = gap//2

            #print("Pass")
            print(self.shellSortList)

        print("\nSorted List using shell sort", end=" ")
        printList(self.shellSortList)

        print("\nTop 5 in ascending order")
        print(self.shellSortList[-5:])
                    

def printList(list1):
        print(list1)

def switch(pos1, pos2, list1):
    temp = list1[pos1]
    list1[pos1] = list1[pos2]
    list1[pos2] = temp


obj = Sorting()
obj.acceptList()

while True:
    print()
    print("*" * 10 + "Menu" + "*" * 10)
    print("""1 . Insertion Sort
2. Shell Sort
3. EXIT """)
    print("*" * 24)
    choice = int(input("Enter your choice for the following operations: "))

    if choice == 1:
        obj.insertionSort()

    elif choice == 2:
        obj.shellSort()

    elif choice == 3:
        print("EXIT")
        break

    else:
        print("Enter valid input")

#OLD CODE
class Student:
    def __init__(self,arr)->None:
        self.arr = arr


    def insertion_sort(self)->list:
        for i in range(1,len(self.arr)):
            n = self.arr[i]
            k = i-1
            while k>=0 and n<self.arr[k]:
                self.arr[k+1] = self.arr[k]
                k-=1
            self.arr[k+1] = n 
        return self.arr

    def shell_sort(self)->list:
        gap =len(self.arr)//2
        while gap>0:
    
          for i in range(len(self.arr)):
            try:
                if self.arr[i]>self.arr[i+gap]:
                        temp = self.arr[i]
                        self.arr[i]=self.arr[i+gap]
                        self.arr[i+gap]=temp
                k = i
                while k - gap > -1:
                    if self.arr[k - gap] > self.arr[k]:
                        self.arr[k-gap],self.arr[k] = self.arr[k],self.arr[k-gap]
                    k -= 1
                        
                        
                else:
                        pass
            except:
                pass
                
          gap//=2
        return self.arr



if __name__=="__main__":
    n = int(input("Enter the total number of students "))
    percentage_list  = [float(input(f"Enter the percentage for student {i+1} : ")) for i in range(n)]
    S_object = Student(percentage_list)
    insertion_sorted = S_object.insertion_sort()
    shell_sorted = S_object.shell_sort()
    print(f"The top five scores found by shell sort are : {shell_sorted[-5:]}")
    print(f"The top five scores found by insertion sort are : {insertion_sorted[-5:]}")