# -*- coding: utf-8 -*-
"""DSL_Assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_49U8zJPuOo0xd_8X05V7m5XtPyCv77a

Name: Mugdha Malpe<br>
Roll No. 21153<br>
Batch: G1<br>

DSL Assignment 4

a)	Write a Python program to store roll numbers of student in array who attended training program in random order. 
Write function for searching whether particular student attended training program or not, using Linear search and Sentinel search. <br><br>
b)	Write a Python program to store roll numbers of student array who attended training program in sorted order. 
Write function for searching whether particular student attended training program or not, using Binary search and Fibonacci search.
"""

class Searching:
    def __init__(self):
        self.listLength = 0
        self.searchList = []

    def acceptList(self):
        self.listLength = int(input("Enter the number elements in the list "))
        for i in range(self.listLength):
            temp = int(input(f"Enter the element at {i} position "))
            self.searchList.append(temp)

    def LinearSearch(self, key):
        for i in range(self.listLength):
            if self.searchList[i] == key:
                return i
        return -1

    def SentinelSearch(self, key):
        last = self.searchList[self.listLength - 1]
        # make a copy of the last element
        self.searchList[self.listLength - 1] = key
        # set last element to be key
        i = 0

        while self.searchList[i] != key:
            # As last element is key it will end for sure
            i += 1

        self.searchList[self.listLength - 1] = last

        if ((i < self.listLength - 1) or (self.searchList[self.listLength - 1] == key)):
            return i

        else:
            return -1

    def BinarySearch(self, key):
        print("List must be sorted in order to perform binary search\nSo we will sort it")
        print("New list is: ")
        sortedList = self.searchList.copy()
        sortedList.sort()
        print(sortedList)

        low = 0
        high = self.listLength - 1
        while low <= high:
            mid = low + (high - low) // 2
            if sortedList[mid] == key:
                return mid
            elif key > sortedList[mid]:
                low = mid + 1
            else:
                high = mid - 1

        return -1

    def FibonacciSearch(self, key):
        print("List must be sorted in order to perform fibonacci search\nSo we will sort it")
        print("New list is: ")
        sortedList = self.searchList.copy()
        sortedList.sort()
        print(sortedList)
        memset(-1, self.listLength + 2)
        fibonacci(self.listLength + 1)

        m = 0 #m is the fibonacci index(not value) u point to at current time
        #to find the smallest fibonacci number greater than or equal to length of array
        while FibonacciList[m] < self.listLength:
            m += 1

        offset = -1

        while FibonacciList[m] > 1:
            i = min(offset + FibonacciList[m - 2], len(sortedList) - 1)
            # min bcoz offset + FibonacciList[m - 2] might not be less than len(array) compulsorily
            #if the size of array is very large for eg, in 1000s
            if key > sortedList[i]:
              #if key is greater than sorted list[i] then prev memebrs are not required to check
                m = m - 1
                offset = i #elimnates the part of array which we looked at earlier
            elif key < sortedList[i]:
              # key is less than sorted list[i] then numbers greater than key are not required to be checked 
                m -= 2 #eliminates elements greater than key
            else:
                return i

        # this will run if there is one last element left to compare with
        if fibonacci(m - 1) and sortedList[offset + 1] == key:
            return offset + 1

        #return -1 if key is not found in array
        return -1

    def printList(self):
        print(self.searchList)


FibonacciList = []


def memset(value, length):
    for i in range(length):
        FibonacciList.append(value)
        # print(FibonacciList[i])


def fibonacci(n):
    if FibonacciList[n] == -1:
        if n <= 1:
            FibonacciList[n] = n
        else:
            FibonacciList[n] = fibonacci(n - 1) + fibonacci(n - 2)
    return FibonacciList[n]


obj = Searching()
obj.acceptList()

while True:
    print()
    print("*" * 10 + "Menu" + "*" * 10)
    print("""1 . Linear Search
2. Binary Search
3. Sentinel Search
4. Fibonacci Search
5. EXIT """)
    print("-" * 24)
    choice = int(input("Enter your choice for the following operations:"))

    if choice == 1:
        obj.printList()
        key = int(input("Enter the key to be found: "))
        print("*" * 10)
        print("Linear Search")
        position = obj.LinearSearch(key)
        if position == -1:
            print("Element not found")
        else:
            print("Element found at index ", position)

    elif choice == 2:
        obj.printList()
        key = int(input("Enter the key to be found: "))
        print("--" * 10)
        print("Binary Search")
        position = obj.BinarySearch(key)
        if position != -1:
            print("Element found at index ", position)
        else:
            print("Element not found")

    elif choice == 3:
        obj.printList()
        key = int(input("Enter the key to be found: "))
        print("--" * 10)
        print("Sentinel Search")
        position = obj.SentinelSearch(key)
        if position == -1:
            print("Element not found")
        else:
            print("Element found at index ", position)

    elif choice == 4:
        obj.printList()
        key = int(input("Enter the key to be found: "))
        print("--" * 10)
        print("Fibonacci Search")
        position = obj.FibonacciSearch(key)
        if position == -1:
            print("Element not found")
        else:
            print("Element found at index ", position)
        print("--" * 10)

    elif choice == 5:
        print("Exiting...thank you...")
        break

    else:
        print("Enter valid input")

#OLD CODE
class Student:
    program_list = []
    def __init__(self,roll_no)->None:
        self.roll_no = roll_no
        Student.program_list.append(self.roll_no)

    def linear_search(roll_no :int)->int:
        """Performs linear search on the class program list and returns the index of the needed element, Complexity O(n)"""
        for i in range(len(Student.program_list)): #2 conditions are checked at every index one is array[i]==element and other is if i<n
            if Student.program_list[i]==roll_no:
                return i
        return False

    def sentinel_search(roll_no:int)->int:
        """Performs Sentinel search on the class program list and returns the index of the needed element, Complexity O(n)"""
        Student.program_list.append(roll_no)
        i=0
        while Student.program_list[i]!=roll_no: #only 1 condition checked at each index
            i+=1
        Student.program_list.pop()
        if i==len(Student.program_list):
            return False
        else:
            return i
    
    def binary_search(roll_no:int)->int:
        """Performs Binary search on the class program list and returns the index of the needed element, Complexity O(logn)"""
        left = 0
        right = len(Student.program_list)
        Student.program_list.sort()
        mid = int((left+right)/2)
        while Student.program_list[mid]!=roll_no:
            
            if left>right or right==left+1:
                return False

            if Student.program_list[mid]<roll_no:
                left=mid+1
            else :
                right = mid-1
            mid = int((left+right)/2)
        return mid

    def Fibonacci(n:int)->int:
        if n < 0:
            print("Incorrect input")

        elif n == 0:
            return 0

        elif n == 1 or n == 2:
            return 1
    
        else:
            return Student.Fibonacci(n-1) + Student.Fibonacci(n-2)


    def fibonacci_search(roll_no:int)->int:
        """Performs Fibonacci search on the class program list and returns the index of the needed element, Complexity O(logn)"""
        Student.program_list.sort()
        n = len(Student.program_list)
        i=0
        while Student.Fibonacci(i)<n:
              i+=1

        fibo = Student.Fibonacci(i)
  
        fm = fibo 
        fm1 = Student.Fibonacci(i-1)
        fm2 = fm-fm1
        offset = -1
        
        while fm> 1 :
            i = min(offset+fm2, len(Student.program_list)-1)

            if Student.program_list[i]==roll_no:
                return i

            if Student.program_list[i]>roll_no:

                fm = fm2
                fm1 = fm1-fm2
                fm2 = fm-fm1

            if Student.program_list[i]<roll_no:
                
                fm=fm1
                fm1 = fm2
                fm2 = fm-fm1
                offset = i
 
        return -1




        

if __name__=="__main__":
    n = int(input("Enter the total number of students : "))
    for i in range(n):
        j = int(input(f"Enter the roll_no of student {i+1} : "))
        student = Student(j)
    while True:

        choice = int(input("""******MENU*****\n Enter the choice\n1.Search using linear search\n2.Search using sentinel search\n3.Search using binary search\n4.Search using Fibonacci Search\n5.Exit\n"""))
        if choice==1:
            m = int(input("Enter the roll_no to be found : "))
            return_value = Student.linear_search(m)
            if return_value:
                print(f"The element {m} was found at index {Student.linear_search(m)} in the Student list.")
            else:
                print("Match not found")

        elif choice==2:
            m = int(input("Enter the roll_no to be found : "))
            return_value = Student.sentinel_search(m)
            if return_value:
                print(f"The element {m} was found at index {Student.sentinel_search(m)} in the Student list.")
            else:
                print("Match not found")
    
        elif choice==3:
            m = int(input("Enter the roll_no to be found : "))
            return_value = Student.binary_search(m)
            if return_value:
                print(f"The element {m} was found at index {Student.binary_search(m)} in the Student list.")
            else:
                print("Match not found")

        elif choice==4:
            m = int(input("Enter the roll_no to be found : "))
            return_value = Student.fibonacci_search(m)
            if return_value:
                print(f"The element {m} was found at index {Student.fibonacci_search(m) } in the Student list.")
            else:
                print("Match not found")


        else:
            break