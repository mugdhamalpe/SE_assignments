# -*- coding: utf-8 -*-
"""DSL_Assignment6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SU1obNyAGii8JBSTKvj9hV6P5CCzR6oI

Name: Mugdha Malpe<br>
Roll No. 21153<br>
Batch: G1<br>

DSL Assignment 6

Write a Python program to store first year percentage of students in array. 
Write function for sorting array of floating-point numbers in ascending order 
using Quick sort and display top five scor6es.
"""

class Quicksort:
    def __init__(self):
        self.newlist = []
        self.length = 0
        self.acceptList()
        print("\nList before sorting")
        self.printList()
        self.quick_sort(0, len(self.newlist)-1)
        print("\nList after sorting")
        self.printList()
        self.top5()

    def acceptList(self):
        print("Keep on entering the students percentage in the list if you wish to break press -1")
        inputVar = 0.0
        counter = 0
        while(True):
            inputVar = float(
                input(f"Enter the percent of student at roll no {counter+1} "))
            if inputVar == -1:
                if counter > 4:
                    break
                else:
                    print("Enter at least 5 elements")
                    print(f"Number of students currently {counter}")
            while (inputVar < 0 or inputVar > 100):
                inputVar = float(input("Enter in valid range ie 0 to 100 "))
            counter += 1
            self.newlist.append(inputVar)
        self.length = counter

    def swap(self, pos1, pos2):
        temp = self.newlist[pos1]
        self.newlist[pos1] = self.newlist[pos2]
        self.newlist[pos2] = temp

    def quick_sort(self, low, high):
        _low = low
        _high = high
        if low < high:
            pivotIndex = _low
            pivotElement = self.newlist[_low]
            while _low < _high:
                while _low < len(self.newlist) and self.newlist[_low] <= pivotElement:
                    _low += 1
                while self.newlist[_high] > pivotElement:
                    _high -= 1
                if _low < _high:
                    self.swap(_low, _high)
            self.swap(_high, pivotIndex)
            print("List after partition ", self.newlist)

            partionioningIndex = _high
            self.quick_sort(low, partionioningIndex-1)
            self.quick_sort(partionioningIndex+1, high)

    def printList(self):
        print(self.newlist)

    def top5(self):
        count = 1
        iterator = -1
        print("\n***TOP SCORES in the Class***")
        while iterator != -6:
            if (len(self.newlist) >= count):
                print(
                    f"The score at position {count} = ", self.newlist[iterator])
                count = count + 1
                iterator = iterator - 1
            else:
                break


obj = Quicksort()